{"version":3,"file":"index.5e9e7429.js","sources":["../../src/domains/dashboard/index.tsx","../../src/infrastructure/router/utils.ts","../../src/application/pages/dashboard/index.tsx"],"sourcesContent":["import React from 'react';\n\nimport { Link } from 'react-router-dom';\n\nimport { Tiles } from '@daimler/react-ux-business-app';\n\nimport { DashboardWrapper, Title, CardContainer } from './styled';\n\nimport type { RoutesType } from '@router/types';\nimport { useTranslation } from '@i10n/index';\n\ntype DashboardDomainProps = {\n  tileTitle: string;\n  pages: RoutesType;\n};\n\nexport const DashboardDomain: React.FC<DashboardDomainProps> = ({\n  tileTitle,\n  pages,\n}) => {\n  const t = useTranslation();\n  return (\n    <DashboardWrapper>\n      <Title>{t(tileTitle)}</Title>\n      <CardContainer>\n        {pages.map(({ path, title, description }) => (\n          <Link to={path} key={path}>\n            <Tiles\n              title={title as string}\n              description={description as string}\n            />\n          </Link>\n        ))}\n      </CardContainer>\n    </DashboardWrapper>\n  );\n};\n","import { Permission } from '@permissions/constants';\nimport { RoutesType, TileGroup } from './types';\n\nexport const filterPagesByTileGroup = (routes: RoutesType, group: TileGroup) =>\n  routes.filter(\n    ({ tileGroup }) => tileGroup != undefined && [group].includes(tileGroup),\n  );\n\nexport const filterPagesByPermissions = (\n  routes: RoutesType,\n  userPermissions: Permission[],\n) =>\n  routes.filter(\n    ({ permissions }) =>\n      permissions == undefined ||\n      permissions.filter((p) => userPermissions.includes(p)).length > 0,\n  );\n","import React, { memo } from 'react';\n\nimport { DashboardDomain } from '@domains/dashboard';\nimport { filterPagesByTileGroup } from '@router/utils';\n\nimport { routes } from '../routes';\nimport { TileGroup } from '@router/types';\nimport { filterPagesByPermissions } from '@router/utils';\nimport { Permission } from '@permissions/constants';\nimport { usePermissions } from '@permissions/index';\n\nfunction DashboardPage() {\n  const userPermissions = usePermissions() as Permission[];\n  const filteredRoutes = filterPagesByPermissions(routes, userPermissions);\n  const pages = (tileGroup: TileGroup) =>\n    filterPagesByTileGroup(filteredRoutes, tileGroup);\n\n  return (\n    <>\n      {Object.values(TileGroup).map((tileGroup) => (\n        <DashboardDomain\n          key=\"dashboard-domain\"\n          tileTitle={`Rabs.Dashboard.TileGroup.${tileGroup}`}\n          pages={pages(tileGroup)}\n        />\n      ))}\n    </>\n  );\n}\n\nexport default memo(DashboardPage);\n"],"names":["DashboardDomain","tileTitle","pages","t","useTranslation","DashboardWrapper","children","_jsx","Title","CardContainer","map","path","title","description","Link","to","Tiles","filterPagesByTileGroup","routes","group","tileGroup","filterPagesByPermissions","userPermissions","permissions","p","DashboardPage","usePermissions","filteredRoutes","_Fragment","Object","values","TileGroup","memo"],"mappings":"8JAgBO,MAAMA,EAAkDA,CAAC,CAC9DC,UAAAA,EACAC,MAAAA,CACF,IAAM,CACJ,MAAMC,EAAIC,IACV,SACGC,EAAgB,CAAAC,SAAA,CACfC,EAACC,EAAK,CAAAF,SAAEH,EAAEF,CAAS,CAAA,CAAS,EAC5BM,EAACE,EAAa,CAAAH,SACXJ,EAAMQ,IAAI,CAAC,CAAEC,KAAAA,EAAMC,MAAAA,EAAOC,YAAAA,CAAAA,MACxBC,EAAI,CAACC,GAAIJ,EAAKL,WACZU,EAAK,CACJJ,MAAAA,EACAC,YAAAA,CAAAA,CACD,CAAC,EAJiBF,CAKf,CACP,CAAA,CACY,CAAC,CAAA,CACA,CAEtB,ECjCaM,EAAyB,CAACC,EAAoBC,IACzDD,EAAO,OACL,CAAC,CAAE,UAAAE,CAAgB,IAAAA,GAAa,MAAa,CAACD,CAAK,EAAE,SAASC,CAAS,CACzE,EAEWC,EAA2B,CACtCH,EACAI,IAEAJ,EAAO,OACL,CAAC,CAAE,YAAAK,CAAY,IACbA,GAAe,MACfA,EAAY,OAAQC,GAAMF,EAAgB,SAASE,CAAC,CAAC,EAAE,OAAS,CACpE,ECLF,SAASC,GAAgB,CACvB,MAAMH,EAAkBI,IAClBC,EAAiBN,EAAyBH,EAAQI,CAAe,EACjEpB,EAASkB,GACbH,EAAuBU,EAAgBP,CAAS,EAElD,SACEQ,EAAA,CAAAtB,SACGuB,OAAOC,OAAOC,CAAS,EAAErB,IAAKU,KAC5BpB,EAAe,CAEdC,UAAY,4BAA2BmB,IACvClB,MAAOA,EAAMkB,CAAS,CAAE,EAFpB,kBAGL,CACF,CAAA,CACD,CAEN,CAEA,MAAeY,EAAAA,EAAAA,QAAAA,KAAKP,CAAa"}